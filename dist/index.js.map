{
  "version": 3,
  "sources": ["../lib/snanvariancewd.js", "../lib/ndarray.js", "../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar float64ToFloat32 = require( '@stdlib/number-float64-base-to-float32' );\n\n\n// MAIN //\n\n/**\n* Computes the variance of a single-precision floating-point strided array ignoring `NaN` values and using Welford's algorithm.\n*\n* ## References\n*\n* -   Welford, B. P. 1962. \"Note on a Method for Calculating Corrected Sums of Squares and Products.\" _Technometrics_ 4 (3). Taylor & Francis: 419\u201320. doi:[10.1080/00401706.1962.10490022](https://doi.org/10.1080/00401706.1962.10490022).\n* -   van Reeken, A. J. 1968. \"Letters to the Editor: Dealing with Neely's Algorithms.\" _Communications of the ACM_ 11 (3): 149\u201350. doi:[10.1145/362929.362961](https://doi.org/10.1145/362929.362961).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} correction - degrees of freedom adjustment\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} variance\n*\n* @example\n* var Float32Array = require( '@stdlib/array-float32' );\n*\n* var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\n* var N = x.length;\n*\n* var v = snanvariancewd( N, 1, x, 1 );\n* // returns ~4.3333\n*/\nfunction snanvariancewd( N, correction, x, stride ) {\n\tvar delta;\n\tvar mu;\n\tvar M2;\n\tvar ix;\n\tvar nc;\n\tvar v;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tv = x[ 0 ];\n\t\tif ( v === v && N-correction > 0.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn NaN;\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tM2 = 0.0;\n\tmu = 0.0;\n\tn = 0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( v === v ) {\n\t\t\tdelta = float64ToFloat32( v - mu );\n\t\t\tn += 1;\n\t\t\tmu = float64ToFloat32( mu + float64ToFloat32( delta/n ) );\n\t\t\tM2 = float64ToFloat32( M2 + float64ToFloat32( delta*float64ToFloat32( v-mu ) ) ); // eslint-disable-line max-len\n\t\t}\n\t\tix += stride;\n\t}\n\tnc = n - correction;\n\tif ( nc <= 0.0 ) {\n\t\treturn NaN;\n\t}\n\treturn float64ToFloat32( M2 / nc );\n}\n\n\n// EXPORTS //\n\nmodule.exports = snanvariancewd;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar float64ToFloat32 = require( '@stdlib/number-float64-base-to-float32' );\n\n\n// MAIN //\n\n/**\n* Computes the variance of a single-precision floating-point strided array ignoring `NaN` values and using Welford's algorithm.\n*\n* ## References\n*\n* -   Welford, B. P. 1962. \"Note on a Method for Calculating Corrected Sums of Squares and Products.\" _Technometrics_ 4 (3). Taylor & Francis: 419\u201320. doi:[10.1080/00401706.1962.10490022](https://doi.org/10.1080/00401706.1962.10490022).\n* -   van Reeken, A. J. 1968. \"Letters to the Editor: Dealing with Neely's Algorithms.\" _Communications of the ACM_ 11 (3): 149\u201350. doi:[10.1145/362929.362961](https://doi.org/10.1145/362929.362961).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} correction - degrees of freedom adjustment\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} variance\n*\n* @example\n* var Float32Array = require( '@stdlib/array-float32' );\n* var floor = require( '@stdlib/math-base-special-floor' );\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n* var N = floor( x.length / 2 );\n*\n* var v = snanvariancewd( N, 1, x, 2, 1 );\n* // returns 6.25\n*/\nfunction snanvariancewd( N, correction, x, stride, offset ) {\n\tvar delta;\n\tvar mu;\n\tvar M2;\n\tvar ix;\n\tvar nc;\n\tvar v;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tv = x[ offset ];\n\t\tif ( v === v && N-correction > 0.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn NaN;\n\t}\n\tix = offset;\n\tM2 = 0.0;\n\tmu = 0.0;\n\tn = 0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( v === v ) {\n\t\t\tdelta = float64ToFloat32( v - mu );\n\t\t\tn += 1;\n\t\t\tmu = float64ToFloat32( mu + float64ToFloat32( delta/n ) );\n\t\t\tM2 = float64ToFloat32( M2 + float64ToFloat32( delta*float64ToFloat32( v-mu ) ) ); // eslint-disable-line max-len\n\t\t}\n\t\tix += stride;\n\t}\n\tnc = n - correction;\n\tif ( nc <= 0.0 ) {\n\t\treturn NaN;\n\t}\n\treturn float64ToFloat32( M2 / nc );\n}\n\n\n// EXPORTS //\n\nmodule.exports = snanvariancewd;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-nonenumerable-read-only-property' );\nvar snanvariancewd = require( './snanvariancewd.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( snanvariancewd, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = snanvariancewd;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the variance of a single-precision floating-point strided array ignoring `NaN` values and using Welford's algorithm.\n*\n* @module @stdlib/stats-base-snanvariancewd\n*\n* @example\n* var Float32Array = require( '@stdlib/array-float32' );\n* var snanvariancewd = require( '@stdlib/stats-base-snanvariancewd' );\n*\n* var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\n*\n* var v = snanvariancewd( x.length, 1, x, 1 );\n* // returns ~4.3333\n*\n* @example\n* var Float32Array = require( '@stdlib/array-float32' );\n* var floor = require( '@stdlib/math-base-special-floor' );\n* var snanvariancewd = require( '@stdlib/stats-base-snanvariancewd' );\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN, NaN ] );\n* var N = floor( x.length / 2 );\n*\n* var v = snanvariancewd.ndarray( N, 1, x, 2, 1 );\n* // returns 6.25\n*/\n\n// MODULES //\n\nvar join = require( 'path' ).join;\nvar tryRequire = require( '@stdlib/utils-try-require' );\nvar isError = require( '@stdlib/assert-is-error' );\nvar main = require( './main.js' );\n\n\n// MAIN //\n\nvar snanvariancewd;\nvar tmp = tryRequire( join( __dirname, './native.js' ) );\nif ( isError( tmp ) ) {\n\tsnanvariancewd = main;\n} else {\n\tsnanvariancewd = tmp;\n}\n\n\n// EXPORTS //\n\nmodule.exports = snanvariancewd;\n\n// exports: { \"ndarray\": \"snanvariancewd.ndarray\" }\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAmB,QAAS,wCAAyC,EA4BzE,SAASC,EAAgBC,EAAGC,EAAYC,EAAGC,EAAS,CACnD,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAKX,GAAK,EACT,MAAO,KAER,GAAKA,IAAM,GAAKG,IAAW,EAE1B,OADAM,EAAIP,EAAG,CAAE,EACJO,IAAMA,GAAKT,EAAEC,EAAa,EACvB,EAED,IAUR,IARKE,EAAS,EACbI,GAAM,EAAEP,GAAKG,EAEbI,EAAK,EAEND,EAAK,EACLD,EAAK,EACLK,EAAI,EACEC,EAAI,EAAGA,EAAIX,EAAGW,IACnBF,EAAIP,EAAGK,CAAG,EACLE,IAAMA,IACVL,EAAQN,EAAkBW,EAAIJ,CAAG,EACjCK,GAAK,EACLL,EAAKP,EAAkBO,EAAKP,EAAkBM,EAAMM,CAAE,CAAE,EACxDJ,EAAKR,EAAkBQ,EAAKR,EAAkBM,EAAMN,EAAkBW,EAAEJ,CAAG,CAAE,CAAE,GAEhFE,GAAMJ,EAGP,OADAK,EAAKE,EAAIT,EACJO,GAAM,EACH,IAEDV,EAAkBQ,EAAKE,CAAG,CAClC,CAKAX,EAAO,QAAUE,IClGjB,IAAAa,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAmB,QAAS,wCAAyC,EA8BzE,SAASC,EAAgBC,EAAGC,EAAYC,EAAGC,EAAQC,EAAS,CAC3D,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAKZ,GAAK,EACT,MAAO,KAER,GAAKA,IAAM,GAAKG,IAAW,EAE1B,OADAO,EAAIR,EAAGE,CAAO,EACTM,IAAMA,GAAKV,EAAEC,EAAa,EACvB,EAED,IAMR,IAJAO,EAAKJ,EACLG,EAAK,EACLD,EAAK,EACLK,EAAI,EACEC,EAAI,EAAGA,EAAIZ,EAAGY,IACnBF,EAAIR,EAAGM,CAAG,EACLE,IAAMA,IACVL,EAAQP,EAAkBY,EAAIJ,CAAG,EACjCK,GAAK,EACLL,EAAKR,EAAkBQ,EAAKR,EAAkBO,EAAMM,CAAE,CAAE,EACxDJ,EAAKT,EAAkBS,EAAKT,EAAkBO,EAAMP,EAAkBY,EAAEJ,CAAG,CAAE,CAAE,GAEhFE,GAAML,EAGP,OADAM,EAAKE,EAAIV,EACJQ,GAAM,EACH,IAEDX,EAAkBS,EAAKE,CAAG,CAClC,CAKAZ,EAAO,QAAUE,IChGjB,IAAAc,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAc,QAAS,uDAAwD,EAC/EC,EAAiB,IACjBC,EAAU,IAKdF,EAAaC,EAAgB,UAAWC,CAAQ,EAKhDH,EAAO,QAAUE,ICcjB,IAAIE,EAAO,QAAS,MAAO,EAAE,KACzBC,EAAa,QAAS,2BAA4B,EAClDC,EAAU,QAAS,yBAA0B,EAC7CC,EAAO,IAKPC,EACAC,EAAMJ,EAAYD,EAAM,UAAW,aAAc,CAAE,EAClDE,EAASG,CAAI,EACjBD,EAAiBD,EAEjBC,EAAiBC,EAMlB,OAAO,QAAUD",
  "names": ["require_snanvariancewd", "__commonJSMin", "exports", "module", "float64ToFloat32", "snanvariancewd", "N", "correction", "x", "stride", "delta", "mu", "M2", "ix", "nc", "v", "n", "i", "require_ndarray", "__commonJSMin", "exports", "module", "float64ToFloat32", "snanvariancewd", "N", "correction", "x", "stride", "offset", "delta", "mu", "M2", "ix", "nc", "v", "n", "i", "require_main", "__commonJSMin", "exports", "module", "setReadOnly", "snanvariancewd", "ndarray", "join", "tryRequire", "isError", "main", "snanvariancewd", "tmp"]
}
